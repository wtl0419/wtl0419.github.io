<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SEwtl</title>
  
  <subtitle>嵌入式软件工程师</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-10-15T13:15:40.240Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Wtl</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>面试笔试题</title>
    <link href="http://example.com/2022/10/13/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AF%95%E9%A2%98/"/>
    <id>http://example.com/2022/10/13/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AF%95%E9%A2%98/</id>
    <published>2022-10-13T07:59:13.000Z</published>
    <updated>2022-10-15T13:15:40.240Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C语言与数据结构"><a href="#C语言与数据结构" class="headerlink" title="C语言与数据结构"></a>C语言与数据结构</h1><h2 id="使用C语言实现读写寄存器变量"><a href="#使用C语言实现读写寄存器变量" class="headerlink" title="使用C语言实现读写寄存器变量"></a>使用C语言实现读写寄存器变量</h2><p>#definerBANKCON0*((volatile unsigned long *)0x48000004)</p><p>rBANKCON0 &#x3D; 0x12;</p><h2 id="在C语言中，凡是以-开头的都是预处理命令，同时预处理命令都是以-开头"><a href="#在C语言中，凡是以-开头的都是预处理命令，同时预处理命令都是以-开头" class="headerlink" title="在C语言中，凡是以#开头的都是预处理命令，同时预处理命令都是以#开头"></a>在C语言中，凡是以#开头的都是预处理命令，同时预处理命令都是以#开头</h2><h2 id="预处理标识-error在编译程序时，只要遇到-error就会跳出一个编译错误"><a href="#预处理标识-error在编译程序时，只要遇到-error就会跳出一个编译错误" class="headerlink" title="预处理标识#error在编译程序时，只要遇到#error就会跳出一个编译错误"></a>预处理标识#error在编译程序时，只要遇到#error就会跳出一个编译错误</h2><h2 id="static关键字"><a href="#static关键字" class="headerlink" title="static关键字"></a>static关键字</h2><p>修饰局部变量</p><p>修饰全局变量</p><p>修饰函数</p><h2 id="typedef关键字"><a href="#typedef关键字" class="headerlink" title="typedef关键字"></a>typedef关键字</h2><p>#define dPS struct s*</p><p>dPS p1,p2;</p><p>typedef struct s * dPS</p><p>dPS p1,p2;</p><p>前者定义了一个结构体指针和一个结构体，后者定义了两个结构体指针。</p><h2 id="sizeof和strlen"><a href="#sizeof和strlen" class="headerlink" title="sizeof和strlen"></a>sizeof和strlen</h2><p>sizeof用于计算变量所占的字节数,包含字符串的’\0’;</p><p>strlen用于计算字符串所占的字节数，但不包好’\0’;</p><h2 id="extern关键字"><a href="#extern关键字" class="headerlink" title="extern关键字"></a>extern关键字</h2><p>跨文件引用全局变量</p><h2 id="extern-“C”"><a href="#extern-“C”" class="headerlink" title="extern “C”"></a>extern “C”</h2><p>在C++中调用C函数</p><h2 id="register关键字"><a href="#register关键字" class="headerlink" title="register关键字"></a>register关键字</h2><p>被该关键字修饰的变量尽量存入寄存器中</p><h2 id="const和-define的区别"><a href="#const和-define的区别" class="headerlink" title="const和#define的区别"></a>const和#define的区别</h2><p>const有数据类型，编译器可以对其做类型检查</p><p>define没有类型，只是在预处理阶段进行替换</p><h2 id="定义一个有10个指针的数组，10个指针均指向函数，并且参数为int，返回值为int"><a href="#定义一个有10个指针的数组，10个指针均指向函数，并且参数为int，返回值为int" class="headerlink" title="定义一个有10个指针的数组，10个指针均指向函数，并且参数为int，返回值为int"></a>定义一个有10个指针的数组，10个指针均指向函数，并且参数为int，返回值为int</h2><p>int(*a[10])(int);</p><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><p>无符号数和有符号数进行运算时，有符号数会被强制转换为无符号数。</p><h2 id="指针题"><a href="#指针题" class="headerlink" title="指针题"></a>指针题</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *a = (<span class="type">int</span> *)<span class="number">2</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, a+<span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>输出14；</p><p>int为4字节，a每＋1等于＋4；</p><h2 id="数组首元素地址和数组首地址"><a href="#数组首元素地址和数组首地址" class="headerlink" title="数组首元素地址和数组首地址"></a>数组首元素地址和数组首地址</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">10</span>];</span><br><span class="line">&amp;a[<span class="number">10</span>];<span class="comment">//a+1为第二个元素的地址</span></span><br><span class="line">&amp;a;<span class="comment">//a+1为向后移动40个字节</span></span><br></pre></td></tr></table></figure><h2 id="给定一个地址a，强制转换为函数指针"><a href="#给定一个地址a，强制转换为函数指针" class="headerlink" title="给定一个地址a，强制转换为函数指针"></a>给定一个地址a，强制转换为函数指针</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="type">int</span> (*)(<span class="type">int</span>))a;</span><br></pre></td></tr></table></figure><h2 id="赋值规则"><a href="#赋值规则" class="headerlink" title="赋值规则"></a>赋值规则</h2><p>长赋值给短：截取低位，按短整数的数据类型解析</p><p>短赋值给长：无符号数高位补零或有符号数高位补符号位</p><p>浮点转整形：截取整数部分</p><p>整形转浮点：小数部分为0</p><p>float和double之间；前者向后者转不会丢失精度，后者向前者转会丢失精度</p><p>整数在内存中以补码形式存储</p><h2 id="C语言内存"><a href="#C语言内存" class="headerlink" title="C语言内存"></a>C语言内存</h2><h3 id="栈区"><a href="#栈区" class="headerlink" title="栈区"></a>栈区</h3><p>存放函数的参数，局部变量</p><h3 id="堆区"><a href="#堆区" class="headerlink" title="堆区"></a>堆区</h3><p>可动态申请的内存</p><h3 id="数据段"><a href="#数据段" class="headerlink" title="数据段"></a>数据段</h3><p>全局变量和静态局部变量</p><h3 id="bss段"><a href="#bss段" class="headerlink" title="bss段"></a>bss段</h3><p>未初始化或初始化为0的全局变量或静态局部变量</p><h3 id="代码段"><a href="#代码段" class="headerlink" title="代码段"></a>代码段</h3><p>存放二进制代码或者字符串常量</p><h2 id="大小端"><a href="#大小端" class="headerlink" title="大小端"></a>大小端</h2><h3 id="大端"><a href="#大端" class="headerlink" title="大端"></a>大端</h3><p>权重值大的放在低地址</p><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><p>符号位在低地址的第一个字节中，便于快速判断数据的正负和大小</p><h3 id="小端"><a href="#小端" class="headerlink" title="小端"></a>小端</h3><p>权重值小的放在低地址。</p><h4 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h4><p>CPU做数值运算时依次从内存的低位到高位进行运算，这样效率更高。</p><h3 id="判断大小端"><a href="#判断大小端" class="headerlink" title="判断大小端"></a>判断大小端</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">check</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">0x12345678</span>;</span><br><span class="line">    <span class="type">char</span> *c = (<span class="type">char</span> *)&amp;a;</span><br><span class="line">    <span class="keyword">if</span>(*c == <span class="number">0x12</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;big endian&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(*c == <span class="number">0x78</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;little endian&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="全局变量和局部变量的区别"><a href="#全局变量和局部变量的区别" class="headerlink" title="全局变量和局部变量的区别"></a>全局变量和局部变量的区别</h2><p>全局变量存放在数据段，生命周期为进程级</p><p>局部变量存放在栈区，生命周期只在函数内，退出函数时销毁</p><h2 id="malloc底层实现"><a href="#malloc底层实现" class="headerlink" title="malloc底层实现"></a>malloc底层实现</h2><p>在操作系统中有一个可用内存块连接成的空闲链表，调用malloc时，函数遍历该链表寻找足够大的内存空间，将该空间一分为二，一块用户使用，一块返回链表，调用free函数时，内存重新连接回链表。</p><p>若内存块过于琐碎无法满足申请需求，操作系统会合并相邻内存块</p><h2 id="在1G内存中可以通过malloc申请大于1G内存"><a href="#在1G内存中可以通过malloc申请大于1G内存" class="headerlink" title="在1G内存中可以通过malloc申请大于1G内存"></a>在1G内存中可以通过malloc申请大于1G内存</h2><p>malloc函数是在程序的虚拟地址空间申请的内存，操作系统可以通过虚拟内存技术扩大内存</p><h2 id="内存泄漏"><a href="#内存泄漏" class="headerlink" title="内存泄漏"></a>内存泄漏</h2><p>使用malloc申请的内存没有使用free函数进行回收</p><h2 id="堆溢出和栈溢出"><a href="#堆溢出和栈溢出" class="headerlink" title="堆溢出和栈溢出"></a>堆溢出和栈溢出</h2><h3 id="堆溢出"><a href="#堆溢出" class="headerlink" title="堆溢出"></a>堆溢出</h3><p>堆的尺寸设置的过小或者动态申请的内存没有释放</p><h3 id="栈溢出"><a href="#栈溢出" class="headerlink" title="栈溢出"></a>栈溢出</h3><p>递归层次太深或者分配了过大的内存</p><h2 id="位翻转"><a href="#位翻转" class="headerlink" title="位翻转"></a>位翻转</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">char</span> <span class="title function_">bit_reverse</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> num)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> bit = <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">while</span>(bit--)</span><br><span class="line">    &#123;</span><br><span class="line">        result |= ((num&amp;<span class="number">0x01</span>)&lt;&lt;bit);</span><br><span class="line">        num &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="memmove"><a href="#memmove" class="headerlink" title="memmove"></a>memmove</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> *<span class="title function_">memmove</span><span class="params">(<span class="type">void</span> *dst, <span class="type">const</span> <span class="type">void</span> *src, <span class="type">size_t</span> count)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(dst == <span class="literal">NULL</span> || src == <span class="literal">NULL</span> || count == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span>(dst &lt; src)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">char</span> *d = (<span class="type">char</span> *)dst;</span><br><span class="line">        <span class="type">char</span> *s = (<span class="type">char</span> *)src;</span><br><span class="line">        <span class="keyword">while</span>(count--)</span><br><span class="line">        &#123;</span><br><span class="line">            *d++ = *s++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="type">char</span> *d = (<span class="type">char</span> *)dst + count;</span><br><span class="line">        <span class="type">char</span> *s = (<span class="type">char</span> *)src + count;</span><br><span class="line">        <span class="keyword">while</span>(count--)</span><br><span class="line">        &#123;</span><br><span class="line">            *--d = *--s;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dst;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="查找最长连续数字，并标出位置和长度"><a href="#查找最长连续数字，并标出位置和长度" class="headerlink" title="查找最长连续数字，并标出位置和长度"></a>查找最长连续数字，并标出位置和长度</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> *<span class="title function_">find</span><span class="params">(<span class="type">char</span> *a, <span class="type">int</span> *size)</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="type">char</span> *in = a, *temp,*pos;  </span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>, max = <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">while</span>(*in != <span class="string">&#x27;\0&#x27;</span>)  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">if</span>(*in &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; *in &lt;= <span class="string">&#x27;9&#x27;</span>)  <span class="comment">// 寻找数字  </span></span><br><span class="line">        &#123;  </span><br><span class="line">            temp = in;  </span><br><span class="line">            <span class="keyword">while</span>(*in &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; *in &lt;= <span class="string">&#x27;9&#x27;</span>)  <span class="comment">// 判断长度  </span></span><br><span class="line">            &#123;  </span><br><span class="line">                count += <span class="number">1</span>;  </span><br><span class="line">                in++;  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">if</span>(count &gt; max)  <span class="comment">// 记录最长连续数字的位置跟长度  </span></span><br><span class="line">            &#123;  </span><br><span class="line">                pos = temp;  </span><br><span class="line">                max = count;   </span><br><span class="line">            &#125;  </span><br><span class="line">            count = <span class="number">0</span>; </span><br><span class="line">        &#125;  </span><br><span class="line">        in++;  </span><br><span class="line">    &#125;  </span><br><span class="line">    *size = max;  </span><br><span class="line">    <span class="keyword">return</span> pos;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="大小端转换"><a href="#大小端转换" class="headerlink" title="大小端转换"></a>大小端转换</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">endian_reverse</span><span class="params">(<span class="type">int</span> num)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> size = <span class="keyword">sizeof</span>(num);</span><br><span class="line">    <span class="keyword">while</span>(size--)</span><br><span class="line">    &#123;</span><br><span class="line">        result |= ((num&amp;<span class="number">0xFF</span>) &lt;&lt; (size * <span class="number">8</span>));</span><br><span class="line">        num &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="new和malloc的区别"><a href="#new和malloc的区别" class="headerlink" title="new和malloc的区别"></a>new和malloc的区别</h2><p>new和delete是c++的操作符，malloc和free是c的标准库函数</p><p>c++允许重载这两个操作符，C不允许重载函数</p><p>new返回的是对象类型的指针，严格与对象匹配，malloc返回的是void *类型的指针，需要进行强制转换</p><p>new可以自动计算所申请的内存大小，malloc需要显式地给出内存大小</p><p>new操作符从自由存储区上动态分配内存，malloc从堆区分配内存</p><p>new分配失败会抛出异常，malloc分配失败会返回NULL</p><p>new&#x2F;delete会调用对象的构造&#x2F;析构函数，已完成对对象的构造&#x2F;析构，而malloc不会</p><h2 id="C语言代码优化"><a href="#C语言代码优化" class="headerlink" title="C语言代码优化"></a>C语言代码优化</h2><p>选择合适的数据结构与算法</p><p>使用尽可能小的数据类型</p><p>使用自加、自减指令</p><p>使用移位运算来实现乘除法运算</p><p>求余使用&amp;</p><p>平方使用*</p><p>延时函数地自加改为自减</p><p>switch根据发生的频率来进行case排序</p><h2 id="完全二叉树"><a href="#完全二叉树" class="headerlink" title="完全二叉树"></a>完全二叉树</h2><p>当一个数除了最后一层外其他每一层的节点数都达到最大，且最后一层的叶子节点靠左排列时，即为完全二叉树。</p><h2 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h2><p>当且仅当一个树两个子树高度相差不超过1时，即为平衡二叉树。</p><h2 id="堆和栈的区别"><a href="#堆和栈的区别" class="headerlink" title="堆和栈的区别"></a>堆和栈的区别</h2><p>栈是一种先进后出的数据结构，向下生长，栈中分配函数参数和局部变量</p><p>堆是一种经过排序的树形数据结构，向上生长，堆中动态分配内存空间</p><h2 id="快慢指针的应用"><a href="#快慢指针的应用" class="headerlink" title="快慢指针的应用"></a>快慢指针的应用</h2><p>判断链表是否有环</p><p>找出链表中的中间节点</p><h2 id="数组a-N-，存放了数字1-N-1，其中某个数重复一次。写一个函数，找出被重复的数字，时间复杂度必须为O-N"><a href="#数组a-N-，存放了数字1-N-1，其中某个数重复一次。写一个函数，找出被重复的数字，时间复杂度必须为O-N" class="headerlink" title="数组a[N]，存放了数字1 ~ N-1，其中某个数重复一次。写一个函数，找出被重复的数字，时间复杂度必须为O(N)"></a>数组a[N]，存放了数字1 ~ N-1，其中某个数重复一次。写一个函数，找出被重复的数字，时间复杂度必须为O(N)</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">do_dup</span><span class="params">(<span class="type">int</span> *a, <span class="type">int</span> N)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> tmp;</span><br><span class="line">    <span class="keyword">while</span>(a[<span class="number">0</span>] != a[a[<span class="number">0</span>]])</span><br><span class="line">    &#123;</span><br><span class="line">        tmp = a[<span class="number">0</span>];</span><br><span class="line">        a[<span class="number">0</span>] = a[tmp];</span><br><span class="line">        a[tmp] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="ARM裸机开发"><a href="#ARM裸机开发" class="headerlink" title="ARM裸机开发"></a>ARM裸机开发</h1><h2 id="CPU内部结构"><a href="#CPU内部结构" class="headerlink" title="CPU内部结构"></a>CPU内部结构</h2><p>控制单元</p><p>运算单元</p><p>存储单元</p><p>时钟</p><h2 id="虚拟内存"><a href="#虚拟内存" class="headerlink" title="虚拟内存"></a>虚拟内存</h2><p>当系统需要的内存空间大于实际的物理空间时，就需要用到虚拟内存，虚拟内存可以将部分硬盘空间模拟成内存空间，将暂时不运行的程序和不使用的数据存储在硬盘上，需要时再将其存储到内存。</p><h2 id="嵌入式微处理器和DSP的区别"><a href="#嵌入式微处理器和DSP的区别" class="headerlink" title="嵌入式微处理器和DSP的区别"></a>嵌入式微处理器和DSP的区别</h2><p>微处理器偏控制，DSP偏运算，能进行大量数据的快速运算，适用于音视频处理等领域</p><h2 id="ARM指令的状态"><a href="#ARM指令的状态" class="headerlink" title="ARM指令的状态"></a>ARM指令的状态</h2><p>ARM状态：所有指令均为32位</p><p>Thunmb状态：所有指令均为16位</p><p>Thunmb-2状态：兼容16和32位指令</p><p>调试状态：处理机停机调试</p><h2 id="RISC（精简指令集计算机）"><a href="#RISC（精简指令集计算机）" class="headerlink" title="RISC（精简指令集计算机）"></a>RISC（精简指令集计算机）</h2><h2 id="CISC（复杂指令集计算机）"><a href="#CISC（复杂指令集计算机）" class="headerlink" title="CISC（复杂指令集计算机）"></a>CISC（复杂指令集计算机）</h2><h2 id="ARM总线"><a href="#ARM总线" class="headerlink" title="ARM总线"></a>ARM总线</h2><h3 id="AHB"><a href="#AHB" class="headerlink" title="AHB"></a>AHB</h3><p>高速总线，用于连接高速外设</p><h3 id="APB"><a href="#APB" class="headerlink" title="APB"></a>APB</h3><p>低速总线，用于连接低速外设</p><h2 id="中断"><a href="#中断" class="headerlink" title="中断"></a>中断</h2><p>中断函数不能有参数和返回值</p><h3 id="中断处理过程"><a href="#中断处理过程" class="headerlink" title="中断处理过程"></a>中断处理过程</h3><p>中断请求</p><p>中断响应</p><p>保护现场</p><p>中断服务</p><p>恢复现场</p><p>中断返回</p><h3 id="复位中断和其他中断的不同"><a href="#复位中断和其他中断的不同" class="headerlink" title="复位中断和其他中断的不同"></a>复位中断和其他中断的不同</h3><p>复位中断产生后，系统自动从0地址重新开始执行程序，无需中断返回</p><h3 id="中断向量"><a href="#中断向量" class="headerlink" title="中断向量"></a>中断向量</h3><p>中断服务子程序的入口地址</p><h3 id="中断嵌套"><a href="#中断嵌套" class="headerlink" title="中断嵌套"></a>中断嵌套</h3><p>在中断服务函数中产生更高优先级的中断时，暂停当前中断服务程序，转去执行更高优先级的中断服务子程序，处理完成后再来处理当前的中断服务子程序。</p><h3 id="中断优点"><a href="#中断优点" class="headerlink" title="中断优点"></a>中断优点</h3><p>实现CPU和IO设备的并行工作，提高CPU的利用率</p><h3 id="中断缺点"><a href="#中断缺点" class="headerlink" title="中断缺点"></a>中断缺点</h3><p>中断处理过程需要保护现场、恢复现场，整个过程需要一定的时间和空间开销。如果中断的频率太高，会降低系统的性能。 </p><h2 id="寄存器与存储器"><a href="#寄存器与存储器" class="headerlink" title="寄存器与存储器"></a>寄存器与存储器</h2><h3 id="通用寄存器"><a href="#通用寄存器" class="headerlink" title="通用寄存器"></a>通用寄存器</h3><p>R0~R15,堆栈指针寄存器SP为R13,程序链接寄存器LR为R14，程序计数器PC为R15.</p><h3 id="NOR-FLASH"><a href="#NOR-FLASH" class="headerlink" title="NOR FLASH"></a>NOR FLASH</h3><h3 id="NAND-FLASH"><a href="#NAND-FLASH" class="headerlink" title="NAND FLASH"></a>NAND FLASH</h3><h3 id="RAM"><a href="#RAM" class="headerlink" title="RAM"></a>RAM</h3><p>随机存储器，掉电丢失</p><h4 id="SRAM"><a href="#SRAM" class="headerlink" title="SRAM"></a>SRAM</h4><p>静态的随机存储器，加电情况下不需要刷新，数据不会丢失，一般用作CPU缓存</p><h4 id="DRAM"><a href="#DRAM" class="headerlink" title="DRAM"></a>DRAM</h4><p>动态的随机存储器，加电情况下需要不断刷新才能保存数据，一般用作系统内存</p><h4 id="SDRAM"><a href="#SDRAM" class="headerlink" title="SDRAM"></a>SDRAM</h4><p>同步动态随机存储器，</p><h3 id="CPU对cache读取DMA数据"><a href="#CPU对cache读取DMA数据" class="headerlink" title="CPU对cache读取DMA数据"></a>CPU对cache读取DMA数据</h3><p>CPU要先对cache做一个invalidate（作废）操作，再从内存中读取数据到缓存，保证缓存和内存中数据的一致性，才能读取DMA数据。</p><h3 id="缓冲技术的作用"><a href="#缓冲技术的作用" class="headerlink" title="缓冲技术的作用"></a>缓冲技术的作用</h3><p>改善CPU与IO设备之间速度不匹配的矛盾呢</p><p>提高CPU和IO设备的并行性，提高系统的吞吐量和设备的利用率</p><p>减少CPU中断的频率，放宽对中断响应时间的限制</p><h4 id="缓冲技术的种类"><a href="#缓冲技术的种类" class="headerlink" title="缓冲技术的种类"></a>缓冲技术的种类</h4><p>单缓冲，双缓冲，多缓冲，缓冲池</p><h2 id="I-x2F-O接口"><a href="#I-x2F-O接口" class="headerlink" title="I&#x2F;O接口"></a>I&#x2F;O接口</h2><h3 id="GPIO接口的寄存器"><a href="#GPIO接口的寄存器" class="headerlink" title="GPIO接口的寄存器"></a>GPIO接口的寄存器</h3><p>控制寄存器</p><p>数据寄存器</p><p>上拉寄存器</p><h3 id="GPIO的输入输出模式"><a href="#GPIO的输入输出模式" class="headerlink" title="GPIO的输入输出模式"></a>GPIO的输入输出模式</h3><h4 id="输入模式"><a href="#输入模式" class="headerlink" title="输入模式"></a>输入模式</h4><p>浮空输入</p><p>带上拉输入</p><p>带下拉输入</p><p>模拟输入</p><h4 id="输出模式"><a href="#输出模式" class="headerlink" title="输出模式"></a>输出模式</h4><p>开漏输出</p><p>推挽输出</p><p>开漏复用输出</p><p>推挽复用输出</p><h2 id="总线接口"><a href="#总线接口" class="headerlink" title="总线接口"></a>总线接口</h2><h3 id="UART"><a href="#UART" class="headerlink" title="UART"></a>UART</h3><p>串行异步通信，全双工，小端模式</p><p>三根线：RX，TX，GND</p><h3 id="USB"><a href="#USB" class="headerlink" title="USB"></a>USB</h3><p>串行同步通信，半双工，小端模式</p><p>四根线：Vbus，GND，D+，D-</p><p>传输距离短</p><h3 id="SPI"><a href="#SPI" class="headerlink" title="SPI"></a>SPI</h3><p>串行同步通信，全双工，大端模式</p><p>四根线：SCLK，SIMO，SOMI，SS（片选），大端模式</p><h4 id="时钟相位CPOL"><a href="#时钟相位CPOL" class="headerlink" title="时钟相位CPOL"></a>时钟相位CPOL</h4><p>为0时空闲时SCLK为低电平，为1时SCLK为高电平</p><h4 id="时钟极性CPHA"><a href="#时钟极性CPHA" class="headerlink" title="时钟极性CPHA"></a>时钟极性CPHA</h4><p>为0时在第一个边沿开始采样，为1时第二个边沿开始采样</p><h3 id="IIC"><a href="#IIC" class="headerlink" title="IIC"></a>IIC</h3><p>串行同步通信，半双工，大端模式</p><p>两根线：SCL，SDA</p><p>传输距离短</p><h4 id="空闲状态"><a href="#空闲状态" class="headerlink" title="空闲状态"></a>空闲状态</h4><p>SCL与SDA均为高电平，接上拉电阻</p><h4 id="启动信号"><a href="#启动信号" class="headerlink" title="启动信号"></a>启动信号</h4><p>SCL为高电平期间，SDA产生一个下降沿</p><h4 id="数据位发送"><a href="#数据位发送" class="headerlink" title="数据位发送"></a>数据位发送</h4><p>SCL为高电平期间，SDA上电平保持稳定，高电平为数据1，低电平为数据0。</p><h4 id="应答信号"><a href="#应答信号" class="headerlink" title="应答信号"></a>应答信号</h4><p>SCL保持高电平期间，SDA保持低电平，iic总线上所有数据都是以8位一个字节传送，每发送一个字节，就在第九个时钟脉冲周期释放SDA，由接收器反馈一个ACK</p><h4 id="非应答信号"><a href="#非应答信号" class="headerlink" title="非应答信号"></a>非应答信号</h4><p>SCL保持高电平期间，SDA保持高电平，接收到最后一个字节后，发送一个NACK</p><h4 id="停止信号"><a href="#停止信号" class="headerlink" title="停止信号"></a>停止信号</h4><p>SCL保持高电平期间，SDA产生一个上升沿</p><h4 id="写数据步骤"><a href="#写数据步骤" class="headerlink" title="写数据步骤"></a>写数据步骤</h4><p>发出启动信号（START）</p><p>主机发送7位从机地址＋一位读写位，1表示读，0表示写（0）</p><p>从机产生应答信号（ACK）</p><p>主机发送寄存器地址</p><p>从机产生应答信号（ACK）</p><p>主机发送一字节数据</p><p>从机发出应答信号（ACK）</p><p>发送完数据后主机产生停止信号（STOP）</p><h4 id="读数据步骤"><a href="#读数据步骤" class="headerlink" title="读数据步骤"></a>读数据步骤</h4><p>发出启动信号（START）</p><p>主机发送7位从机地址+一位读写位，1读，0写（0）</p><p>从机产生应答信号（ACK）</p><p>主机发送寄存器地址</p><p>从机应答（ACK）</p><p>发出启动信号（START）</p><p>再次发出7位从机地址+一位读写位，1读，0写（1）</p><p>从机应答（ACK）</p><p>读取一字节数据</p><p>主机产生一个非应答信号（NACK）</p><p>读取完成后发出停止信号（STOP）</p><h3 id="异步串行"><a href="#异步串行" class="headerlink" title="异步串行"></a>异步串行</h3><p>以字符为单位传送信息，字符内部各位同步，字符间异步，发送时钟和接收时钟相近即可</p><h3 id="同步串行"><a href="#同步串行" class="headerlink" title="同步串行"></a>同步串行</h3><p>以数据块为单位传送信息，在字符块内，字符之间无间隔，字符内部同步，字符间也同步，接收时钟和发送时钟需要严格同步</p><h3 id="串口发送浮点数据"><a href="#串口发送浮点数据" class="headerlink" title="串口发送浮点数据"></a>串口发送浮点数据</h3><p>使用共用体发送</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">union</span>  </span></span><br><span class="line"><span class="class">&#123;</span>  </span><br><span class="line">    <span class="type">float</span> f;  </span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> l;  </span><br><span class="line">&#125;data_TX;  </span><br><span class="line">data_TX.f = <span class="number">123.456</span>;  </span><br><span class="line">TX = (<span class="type">unsigned</span> <span class="type">char</span>)data_TX.l;       <span class="comment">// 低8位  </span></span><br><span class="line">TX = (<span class="type">unsigned</span> <span class="type">char</span>)(data_TX.l &gt;&gt; <span class="number">8</span>);  </span><br><span class="line">TX = (<span class="type">unsigned</span> <span class="type">char</span>)(data_TX.l &gt;&gt; <span class="number">16</span>);  </span><br><span class="line">TX = (<span class="type">unsigned</span> <span class="type">char</span>)(data_TX.l &gt;&gt; <span class="number">24</span>);  <span class="comment">// 高8位 </span></span><br><span class="line"><span class="class"><span class="keyword">union</span>  </span></span><br><span class="line"><span class="class">&#123;</span>  </span><br><span class="line">    <span class="type">float</span> f;  </span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> l;  </span><br><span class="line">&#125;data_RX;  </span><br><span class="line">data_RX.l = RX;      <span class="comment">// 低8位  </span></span><br><span class="line">data_RX.l |= RX &lt;&lt; <span class="number">8</span>;  </span><br><span class="line">data_RX.l |= RX &lt;&lt; <span class="number">16</span>;  </span><br><span class="line">data_RX.l |= RX &lt;&lt; <span class="number">24</span>; <span class="comment">// 高8位  </span></span><br><span class="line">data_RX.f == data_TX.f;</span><br></pre></td></tr></table></figure><h3 id="UART和TTL、RS-232、RS-485的关系"><a href="#UART和TTL、RS-232、RS-485的关系" class="headerlink" title="UART和TTL、RS-232、RS-485的关系"></a>UART和TTL、RS-232、RS-485的关系</h3><p>UART是一种具有特征协议的收发器，一个按照特定协议来收发数据的硬件。</p><p>其余三者为三种不同的电气协议，UART可以使用这三种电平</p><h4 id="TTL"><a href="#TTL" class="headerlink" title="TTL"></a>TTL</h4><p>+5V或&gt;&#x3D;2.4V为逻辑1</p><p>0V或&lt;&#x3D;0.4V为逻辑0</p><h4 id="RS232"><a href="#RS232" class="headerlink" title="RS232"></a>RS232</h4><p>-5V~-15V为逻辑1</p><p>5V~15V为逻辑0</p><h4 id="RS485"><a href="#RS485" class="headerlink" title="RS485"></a>RS485</h4><p>A线比B线电平高200mV为逻辑1</p><p>A线比B线电平低200mV为逻辑0</p><h4 id="UART如何保证数据传输的正确性"><a href="#UART如何保证数据传输的正确性" class="headerlink" title="UART如何保证数据传输的正确性"></a>UART如何保证数据传输的正确性</h4><p>在数据的两端添加起始位，奇偶校验位，停止位用于数据的同步和纠错</p><h3 id="MSB"><a href="#MSB" class="headerlink" title="MSB"></a>MSB</h3><p>最高有效位，是指二进制中最高值的比特</p><h3 id="LSB"><a href="#LSB" class="headerlink" title="LSB"></a>LSB</h3><p>最低有效位，是指二进制中最低值的比特</p><h3 id="UART一帧可以传5-x2F-6-x2F-7-x2F-8位，IIC必须是8位，SPI可以8-x2F-16位"><a href="#UART一帧可以传5-x2F-6-x2F-7-x2F-8位，IIC必须是8位，SPI可以8-x2F-16位" class="headerlink" title="UART一帧可以传5&#x2F;6&#x2F;7&#x2F;8位，IIC必须是8位，SPI可以8&#x2F;16位"></a>UART一帧可以传<strong>5&#x2F;6&#x2F;7&#x2F;8</strong>位，IIC必须是<strong>8</strong>位，SPI可以<strong>8&#x2F;16</strong>位</h3><h3 id="两种串行通信方式"><a href="#两种串行通信方式" class="headerlink" title="两种串行通信方式"></a>两种串行通信方式</h3><h4 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h4><p>UART</p><h4 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h4><p>SPI，IIC，USB</p><p>串行通信占用资源少，线间干扰小，并行速度快但占用资源多，线间干扰大</p><h1 id="应用编程与网络编程"><a href="#应用编程与网络编程" class="headerlink" title="应用编程与网络编程"></a>应用编程与网络编程</h1><h2 id="进程-amp-线程"><a href="#进程-amp-线程" class="headerlink" title="进程&amp;线程"></a>进程&amp;线程</h2><h3 id="同步IO与异步IO"><a href="#同步IO与异步IO" class="headerlink" title="同步IO与异步IO"></a>同步IO与异步IO</h3><h4 id="同步IO"><a href="#同步IO" class="headerlink" title="同步IO"></a>同步IO</h4><p>当一个IO操作执行时，应用程序必须等待IO执行完</p><h4 id="异步IO"><a href="#异步IO" class="headerlink" title="异步IO"></a>异步IO</h4><p>IO操作和应用程序可以同时运行，提高系统性能</p><h3 id="进程间通信方式"><a href="#进程间通信方式" class="headerlink" title="进程间通信方式"></a>进程间通信方式</h3><h4 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h4><p>半双工通信，数据只能单向流通，通常只能在父子进程之间使用</p><h4 id="有名管道"><a href="#有名管道" class="headerlink" title="有名管道"></a>有名管道</h4><p>允许除父子进程之间的进程使用</p><h4 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h4><p>用于进程之间的同步</p><h4 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h4><h4 id="共享内存"><a href="#共享内存" class="headerlink" title="共享内存"></a>共享内存</h4><p>一段能够被多个进程共同访问的内存，由一个进程创建。是最快的进程间通信方式，通常配合信号量来使用</p><h4 id="套接字"><a href="#套接字" class="headerlink" title="套接字"></a>套接字</h4><p>用于不同主机间的通信</p><h4 id="信号"><a href="#信号" class="headerlink" title="信号"></a>信号</h4><p>用于通知接收进程某个事件已经发送</p><h3 id="进程的地址空间模型"><a href="#进程的地址空间模型" class="headerlink" title="进程的地址空间模型"></a>进程的地址空间模型</h3><h4 id="代码段-1"><a href="#代码段-1" class="headerlink" title="代码段"></a>代码段</h4><p>用于存储代码和字符串常量</p><h4 id="数据段-1"><a href="#数据段-1" class="headerlink" title="数据段"></a>数据段</h4><p>存储初始化不为0的全局变量和静态局部变量、const型常量</p><h4 id="bss段-1"><a href="#bss段-1" class="headerlink" title="bss段"></a>bss段</h4><p>存储未初始化或初始化为0的全局变量和静态局部变量</p><h4 id="堆区-1"><a href="#堆区-1" class="headerlink" title="堆区"></a>堆区</h4><p>用于动态申请的内存</p><h4 id="栈区-1"><a href="#栈区-1" class="headerlink" title="栈区"></a>栈区</h4><p>存储函数参数，局部变量</p><h3 id="进程的五种状态"><a href="#进程的五种状态" class="headerlink" title="进程的五种状态"></a>进程的五种状态</h3><h4 id="就绪态"><a href="#就绪态" class="headerlink" title="就绪态"></a>就绪态</h4><p>所有运行条件已经就绪，只要得到cpu就可运行</p><h4 id="运行态"><a href="#运行态" class="headerlink" title="运行态"></a>运行态</h4><p>得到CPU并正在运行</p><h4 id="僵尸态"><a href="#僵尸态" class="headerlink" title="僵尸态"></a>僵尸态</h4><p>进程已经结束但父进程没有来得及回收其资源</p><h4 id="暂停态"><a href="#暂停态" class="headerlink" title="暂停态"></a>暂停态</h4><p>暂时停止参与CPU的调度</p><h4 id="子进程可以从父进程继承的资源"><a href="#子进程可以从父进程继承的资源" class="headerlink" title="子进程可以从父进程继承的资源"></a>子进程可以从父进程继承的资源</h4><p>堆栈，内存，用户号，组号，打开的文件描述符，当前工作目录、根目录</p><h4 id="进程上下文"><a href="#进程上下文" class="headerlink" title="进程上下文"></a>进程上下文</h4><h5 id="上文"><a href="#上文" class="headerlink" title="上文"></a>上文</h5><p>进程由用户态切换到内核态时需要保存用户态时CPU寄存器中的值，进程状态以及堆栈上的内容，即保存当前进程的状态，以便再次执行该进程时，能够恢复到切换时的状态，继续执行</p><h5 id="下文"><a href="#下文" class="headerlink" title="下文"></a>下文</h5><p>切换到内核态后执行的程序</p><h4 id="中断上下文"><a href="#中断上下文" class="headerlink" title="中断上下文"></a>中断上下文</h4><h5 id="上文-1"><a href="#上文-1" class="headerlink" title="上文"></a>上文</h5><p>和进程相似</p><h5 id="下文-1"><a href="#下文-1" class="headerlink" title="下文"></a>下文</h5><p>执行在内核空间的中断服务程序</p><h4 id="进程和线程的区别"><a href="#进程和线程的区别" class="headerlink" title="进程和线程的区别"></a>进程和线程的区别</h4><p>进程是系统中程序执行和资源分配的基本单位，线程是CPU调度的基本单位</p><p>一个进程可以拥有多个线程，线程可以访问其所属进程的地址空间和系统资源，同时也可以拥有自己的堆栈</p><p>同一个进程内的多个线程可以共享同一地址空间，因此通信实现比较简单，而且切换开销小，创建和消亡的开销也小</p><h4 id="多进程和多线程的应用场景"><a href="#多进程和多线程的应用场景" class="headerlink" title="多进程和多线程的应用场景"></a>多进程和多线程的应用场景</h4><p>当程序的安全性、稳定性要求较高时使用多进程</p><p>需要频繁通信&#x2F;切换&#x2F;创建和销毁时使用多线程</p><p>线程属于进程，运行需要依赖进程的地址空间和系统资源，线程崩溃的本质是内存出错，若出错的内存没有被其他进程访问，则不会导致其他内存出错，也就不会导致进程崩溃。</p><h4 id="线程间的通信方式"><a href="#线程间的通信方式" class="headerlink" title="线程间的通信方式"></a>线程间的通信方式</h4><p>信号、信号量、互斥锁、条件变量、自旋锁、读写锁</p><h4 id="如何防止同时产生大量的线程"><a href="#如何防止同时产生大量的线程" class="headerlink" title="如何防止同时产生大量的线程"></a>如何防止同时产生大量的线程</h4><p>使用线程池</p><h4 id="互斥锁与信号量的区别"><a href="#互斥锁与信号量的区别" class="headerlink" title="互斥锁与信号量的区别"></a>互斥锁与信号量的区别</h4><p>信号量用于线程间的同步，互斥锁用于线程互斥</p><p>信号量可以为非负整数，可以实现多个同类资源的多线程同步，互斥锁只能为0&#x2F;1，只能用于一个资源的互斥访问</p><p>信号量可以由一个线程释放，另一个线程得到。互斥锁的加锁和解锁必须由同一线程分别对应使用，且多个线程使用多个互斥锁必须统一顺序，否则可能造成死锁。</p><h4 id="孤儿进程"><a href="#孤儿进程" class="headerlink" title="孤儿进程"></a>孤儿进程</h4><p>父进程先于子进程结束，此时子进程成为一个孤儿进程</p><h2 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h2><h3 id="OSI协议分层"><a href="#OSI协议分层" class="headerlink" title="OSI协议分层"></a>OSI协议分层</h3><h4 id="七层"><a href="#七层" class="headerlink" title="七层"></a>七层</h4><p>应用层，表示层，会话层，传输层，网络层，数据链路层，物理层</p><h4 id="五层"><a href="#五层" class="headerlink" title="五层"></a>五层</h4><p>应用层，传输层，网络层，数据链路层，物理层</p><h4 id="四层"><a href="#四层" class="headerlink" title="四层"></a>四层</h4><p>应用层，传输层，网络层，网络接口层</p><h3 id="TCP-x2F-IP协议"><a href="#TCP-x2F-IP协议" class="headerlink" title="TCP&#x2F;IP协议"></a>TCP&#x2F;IP协议</h3><p>应用层，传输层、网络层、网络接口层</p><h4 id="建立和释放"><a href="#建立和释放" class="headerlink" title="建立和释放"></a>建立和释放</h4><h5 id="建立"><a href="#建立" class="headerlink" title="建立"></a>建立</h5><p>三次握手</p><h5 id="释放"><a href="#释放" class="headerlink" title="释放"></a>释放</h5><p>四次挥手</p><h4 id="IP地址转换成物理地址"><a href="#IP地址转换成物理地址" class="headerlink" title="IP地址转换成物理地址"></a>IP地址转换成物理地址</h4><p>ARP地址解析协议</p><h4 id="IP地址的编码"><a href="#IP地址的编码" class="headerlink" title="IP地址的编码"></a>IP地址的编码</h4><p>分为网络号和主机号</p><h4 id="ping发出的报文"><a href="#ping发出的报文" class="headerlink" title="ping发出的报文"></a>ping发出的报文</h4><p>ICMP请求报文</p><h4 id="SOCKET编程流程"><a href="#SOCKET编程流程" class="headerlink" title="SOCKET编程流程"></a>SOCKET编程流程</h4><h5 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h5><p>创建套接字，绑定本地IP地址和端口号，设置监听队列长度，等待连接，接收消息，关闭套接字</p><h5 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h5><p>创建套接字，发送请求连接，发送信息，关闭套接字</p><h4 id="TCP-x2F-UDP的区别"><a href="#TCP-x2F-UDP的区别" class="headerlink" title="TCP&#x2F;UDP的区别"></a>TCP&#x2F;UDP的区别</h4><p>TCP是面向连接的，UDP是面向无连接的</p><p>TCP是面向字节流的，UDP是基于数据报的</p><p>TCP提供可靠服务，UDP提供不可靠服务</p><p>TCP程序结构复杂，占用资源多，UDP程序结构简单，占用资源少</p><p>TCP拥有阻塞控制，UDP没有阻塞控制，因此网络出现阻塞不会使源主机发送速率降低，适用于实时应用，如IP电话，实时视频会议</p><p>TCP只支持一对一，UDP支持一对一、一对多、多对一、多对多</p><h4 id="TCP，UDP各自的优缺点"><a href="#TCP，UDP各自的优缺点" class="headerlink" title="TCP，UDP各自的优缺点"></a>TCP，UDP各自的优缺点</h4><h5 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h5><p>优点：稳定可靠</p><p>缺点：效率低，占用资源高。</p><h5 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h5><p>优点：效率高，占用资源少，传输速度快</p><p>缺点：不稳定，不可靠，网络不好时容易丢包</p><h4 id="各自适用场景"><a href="#各自适用场景" class="headerlink" title="各自适用场景"></a>各自适用场景</h4><h5 id="TCP-1"><a href="#TCP-1" class="headerlink" title="TCP"></a>TCP</h5><p>对数据传输质量要求高，对实时性要求不高，如HTTP、FTP等传输协议</p><h5 id="UDP-1"><a href="#UDP-1" class="headerlink" title="UDP"></a>UDP</h5><p>对实时性要求高，数据质量要求不高，如在线视频电话</p><h4 id="socket网络编程五元组"><a href="#socket网络编程五元组" class="headerlink" title="socket网络编程五元组"></a>socket网络编程五元组</h4><p>客户端端口，客户端IP，服务端端口，服务端IP，传输协议</p><h1 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h1><h2 id="MMU的作用"><a href="#MMU的作用" class="headerlink" title="MMU的作用"></a>MMU的作用</h2><p>地址映射</p><p>内存分配和回收</p><p>内存保护</p><p>内存扩充</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;C语言与数据结构&quot;&gt;&lt;a href=&quot;#C语言与数据结构&quot; class=&quot;headerlink&quot; title=&quot;C语言与数据结构&quot;&gt;&lt;/a&gt;C语言与数据结构&lt;/h1&gt;&lt;h2 id=&quot;使用C语言实现读写寄存器变量&quot;&gt;&lt;a href=&quot;#使用C语言实现读写寄存器变量&quot;</summary>
      
    
    
    
    <category term="面试" scheme="http://example.com/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
    <category term="求职" scheme="http://example.com/tags/%E6%B1%82%E8%81%8C/"/>
    
  </entry>
  
  <entry>
    <title>2022.10.11</title>
    <link href="http://example.com/2022/10/11/2022-10-11/"/>
    <id>http://example.com/2022/10/11/2022-10-11/</id>
    <published>2022-10-11T12:39:27.000Z</published>
    <updated>2022-10-11T12:56:29.337Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>看昨天的吧。</p><h1 id="今日进行的事情"><a href="#今日进行的事情" class="headerlink" title="今日进行的事情"></a>今日进行的事情</h1><p>今天上午先是继续进行esp8266连接阿里云的工作，但越看越乱，一会儿阿里云，一会儿onenet云，连个都不太好弄，弄着弄着到了上课的时间，上课之前老师提议让我去北京工作，上课过程中看了看北京的秋招岗位，岗位要求并不多，只要求C语言扎实，其余都是加分项，薪资平均在一万二，让我不禁怀疑我是否真的值这个假期，于是决定花两百块钱付费咨询一下。</p><p>下午把具体情况和微信上的勃勃说了下，他给出了学习路线，并对我的简历进行了评价，简历方面并不需要太多地修改，在本科毕业生水平中处于中上，相当于鼓励了我，目前是打算一边学习ucos实时操作系统一边进行投简历找机会。还说我这个水平的薪资在一万五左右，让我不要妄自菲薄，好家伙，要是真有这样就好了。</p><p>今天进行了ucos的移植工作，还没有做完。</p><h1 id="明日工作"><a href="#明日工作" class="headerlink" title="明日工作"></a>明日工作</h1><p>继续学习ucos，先完成移植工作。</p><h1 id="一些牢骚"><a href="#一些牢骚" class="headerlink" title="一些牢骚"></a>一些牢骚</h1><p>最近因为这个esp8266，有点上火，嘴巴和鼻子周围又爆了好几个痘痘，唉😔。</p><p><img src="https://hexo-1314225961.cos.ap-nanjing.myqcloud.com/%E6%97%A5%E5%B8%B8%E8%AE%B0%E5%BD%95%E7%94%A8%E5%9B%BE/2022.10.11_content.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h1&gt;&lt;p&gt;看昨天的吧。&lt;/p&gt;
&lt;h1 id=&quot;今日进行的事情&quot;&gt;&lt;a href=&quot;#今日进行的事情&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="记录" scheme="http://example.com/categories/%E8%AE%B0%E5%BD%95/"/>
    
    
  </entry>
  
  <entry>
    <title>ucos</title>
    <link href="http://example.com/2022/10/11/ucos/"/>
    <id>http://example.com/2022/10/11/ucos/</id>
    <published>2022-10-11T07:54:43.000Z</published>
    <updated>2022-10-18T11:36:26.512Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RTOS系统"><a href="#RTOS系统" class="headerlink" title="RTOS系统"></a>RTOS系统</h1><h2 id="硬实时"><a href="#硬实时" class="headerlink" title="硬实时"></a>硬实时</h2><p>规定时间内必须完成操作，不允许超时</p><h2 id="软实时"><a href="#软实时" class="headerlink" title="软实时"></a>软实时</h2><p>不如硬实时严格</p><h2 id="可剥夺性内核"><a href="#可剥夺性内核" class="headerlink" title="可剥夺性内核"></a>可剥夺性内核</h2><p>可以剥夺其他任务的CPU使用权，总是在运行就绪任务中的优先级最高的那个任务</p><h1 id="UCOS在F103上的移植"><a href="#UCOS在F103上的移植" class="headerlink" title="UCOS在F103上的移植"></a>UCOS在F103上的移植</h1><h2 id="源码获取"><a href="#源码获取" class="headerlink" title="源码获取"></a>源码获取</h2><p>源码我是通过正点原子提供的源码直接复制过来的，也可以通过mirium官网进行下载。</p><p>官网地址：<a href="https://www.silabs.com/developers/micrium">https://www.silabs.com/developers/micrium</a></p><h2 id="源码移植"><a href="#源码移植" class="headerlink" title="源码移植"></a>源码移植</h2><h3 id="文件移植"><a href="#文件移植" class="headerlink" title="文件移植"></a>文件移植</h3><p>将ucos路径下的三个文件夹复制到工程路径下</p><p><img src="https://hexo-1314225961.cos.ap-nanjing.myqcloud.com/%E5%B5%8C%E5%85%A5%E5%BC%8F/ucos_%E7%A7%BB%E6%A4%8D.png"></p><p>新建两个文件夹UCOS_BSP,UCOS_CONFIG</p><p>向UCOS_CONFIG文件夹中添加\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32F107\uCOS-III路径下的程序文件</p><p><img src="https://hexo-1314225961.cos.ap-nanjing.myqcloud.com/%E5%B5%8C%E5%85%A5%E5%BC%8F/ucos_config.png"></p><p>向UCOS_BSP文件夹中添加Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32F107\BSP路径下的程序文件</p><p><img src="https://hexo-1314225961.cos.ap-nanjing.myqcloud.com/%E5%B5%8C%E5%85%A5%E5%BC%8F/ucos_bsp.png"></p><h3 id="移植到工程"><a href="#移植到工程" class="headerlink" title="移植到工程"></a>移植到工程</h3><p>在工程中新建分组</p><p><img src="https://hexo-1314225961.cos.ap-nanjing.myqcloud.com/%E5%B5%8C%E5%85%A5%E5%BC%8F/project_menu.png"></p><p>移植工程内的文件</p><p><img src="https://hexo-1314225961.cos.ap-nanjing.myqcloud.com/%E5%B5%8C%E5%85%A5%E5%BC%8F/project_menu1.png"></p><p><img src="https://hexo-1314225961.cos.ap-nanjing.myqcloud.com/%E5%B5%8C%E5%85%A5%E5%BC%8F/project_menu2.png"></p><p><img src="https://hexo-1314225961.cos.ap-nanjing.myqcloud.com/%E5%B5%8C%E5%85%A5%E5%BC%8F/project_menu3.png"></p><p>添加完毕后将文件的只读属性取消，随后将所有文件的头文件路径添加到工程中。</p><p><img src="https://hexo-1314225961.cos.ap-nanjing.myqcloud.com/%E5%B5%8C%E5%85%A5%E5%BC%8F/header_file.png"></p><h3 id="修改文件"><a href="#修改文件" class="headerlink" title="修改文件"></a>修改文件</h3><p>直接将修改好的bsp文件和os_cpu_a.asm文件进行替换</p><p>修改完成后将void PendSV_Handler(void)函数注释掉</p><p>修改os_cpu_c.c,添加#include”includes.h”, 并将该文件内的#include  &lt;stm32f10x_lib.h&gt;注释掉</p><p>修改os_cfg_app.h文件，直接复制粘贴修改好的工程 文件</p><p>修改sys.h文件</p><p>将SYSTEM_SUPPORT_OS宏定义更改为1</p><h2 id="任务管理"><a href="#任务管理" class="headerlink" title="任务管理"></a>任务管理</h2><h3 id="滴答定时器"><a href="#滴答定时器" class="headerlink" title="滴答定时器"></a>滴答定时器</h3><p>SysTick-&gt;CTRL:控制及状态寄存器</p><p>SysTick-&gt;LOAD:重装载值寄存器</p><p>SysTick-&gt;VAL:当前数值寄存器</p><p>SysTick-&gt;CALIB:校准数值寄存器</p><h3 id="默认系统任务"><a href="#默认系统任务" class="headerlink" title="默认系统任务"></a>默认系统任务</h3><p>空闲任务</p><p>时钟节拍任务</p><p>统计任务</p><p>定时任务</p><p>中断服务管理任务</p><h3 id="任务状态"><a href="#任务状态" class="headerlink" title="任务状态"></a>任务状态</h3><h4 id="休眠态"><a href="#休眠态" class="headerlink" title="休眠态"></a>休眠态</h4><p>存在于flash中，但不受ucos管理</p><h4 id="就绪态"><a href="#就绪态" class="headerlink" title="就绪态"></a>就绪态</h4><p>任务准备就绪，具备了运行的条件</p><h4 id="运行态"><a href="#运行态" class="headerlink" title="运行态"></a>运行态</h4><p>获得CPU的使用权，正在运行</p><h4 id="等待态"><a href="#等待态" class="headerlink" title="等待态"></a>等待态</h4><p>阻塞状态，等待条件达成后进入就绪态加入就绪队列</p><h4 id="中断服务态"><a href="#中断服务态" class="headerlink" title="中断服务态"></a>中断服务态</h4><p>系统运行过程中发生中断，当前正在运行的任务被挂起，系统转去执行中断处理函数，此时任务的状态为为中断服务态</p><h3 id="任务堆栈"><a href="#任务堆栈" class="headerlink" title="任务堆栈"></a>任务堆栈</h3><p>任务堆栈的功能是为了满足任务切换和响应中断时保存CPU寄存器中的内容以及任务调用其他函数时的需要</p><p>任务堆栈初始化函数：OSTaskStkInit();该函数由创建任务函数自动调用。</p><h3 id="任务控制块"><a href="#任务控制块" class="headerlink" title="任务控制块"></a>任务控制块</h3><p>用于记录与任务相关信息的数据结构，每个任务都有自己的任务控制块，任务创建时自动完成任务控制块的初始化。</p><h3 id="任务就绪表"><a href="#任务就绪表" class="headerlink" title="任务就绪表"></a>任务就绪表</h3><h4 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h4><p>数值越小，优先级越高</p><h4 id="就绪表"><a href="#就绪表" class="headerlink" title="就绪表"></a>就绪表</h4><p>优先级位映射表OSPriodTbl[]：用来记录哪个优先级下有任务就绪。</p><p>就绪任务列表OSRdyList[]：用来记录每一个优先级下所有就绪的任务。</p><p>就绪任务列表存有首个就绪任务的地址和最后一个就绪任务的地址，就绪任务之间使用链表进行连接。</p><h3 id="任务调度"><a href="#任务调度" class="headerlink" title="任务调度"></a>任务调度</h3><h4 id="可剥夺性任务调度"><a href="#可剥夺性任务调度" class="headerlink" title="可剥夺性任务调度"></a>可剥夺性任务调度</h4><p>高优先级任务可以抢占低优先级任务的CPU使用权</p><h4 id="任务调度器"><a href="#任务调度器" class="headerlink" title="任务调度器"></a>任务调度器</h4><h5 id="任务级调度器"><a href="#任务级调度器" class="headerlink" title="任务级调度器"></a>任务级调度器</h5><p>OSSched();任务级调度器可以在其他的osAPI函数中进行自动调用</p><h5 id="中断级调度器"><a href="#中断级调度器" class="headerlink" title="中断级调度器"></a>中断级调度器</h5><p>OSInExit();当退出外部中断服务函数时使用中断级任务调度。</p><h4 id="任务调度点"><a href="#任务调度点" class="headerlink" title="任务调度点"></a>任务调度点</h4><p>释放信号或发送消息</p><p><strong>使用延时函数</strong></p><p>任务等待的事情还没发生</p><p>任务取消等待</p><p><strong>创建任务</strong></p><p><strong>删除任务</strong></p><p>删除一个内核对象</p><p>任务改变自身的优先级或其他任务的优先级</p><p><strong>任务通过调用函数将自己挂起</strong></p><p><strong>结束挂起</strong></p><p><strong>用户调用OSSched();</strong></p><p>任务切换时切换到当前就绪队列中优先级最高的任务。</p><h4 id="调度器的上锁和解锁"><a href="#调度器的上锁和解锁" class="headerlink" title="调度器的上锁和解锁"></a>调度器的上锁和解锁</h4><p>不希望发生任务调度时使用对应函数对调度器进行上锁。</p><h4 id="时间片轮转调度"><a href="#时间片轮转调度" class="headerlink" title="时间片轮转调度"></a>时间片轮转调度</h4><p>每个任务可以执行指定的时间。</p><h3 id="初始化流程"><a href="#初始化流程" class="headerlink" title="初始化流程"></a>初始化流程</h3><p>首先调用OSInit()函数，随后调用OSStart()函数开启ucos。找到当前优先级最高的任务后开始执行该任务</p><h3 id="任务基础API函数"><a href="#任务基础API函数" class="headerlink" title="任务基础API函数"></a>任务基础API函数</h3><h4 id="任务创建函数"><a href="#任务创建函数" class="headerlink" title="任务创建函数"></a>任务创建函数</h4><p>OSTaskCreate();</p><h5 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h5><p>OS_TCB:任务控制块</p><p>CPU_CHAR:任务名</p><p>OS_TASK_PTR:任务名</p><p>p_arg:任务参数</p><p>OS_PRIO:任务优先级</p><p>CPU_STK:栈基地址</p><p>CPU_STK_SIZE:栈容量和深度</p><p>OS_MSG_QTY:内置消息队列长度</p><p>OS_TICK:时间片轮转调度的情况下为时间片的长度</p><p>p_ext:用户补充的参数区</p><p>OS_OPT:用户选项</p><p>OS_ERR:保存任务创建不成功的错误码</p><h4 id="任务删除函数"><a href="#任务删除函数" class="headerlink" title="任务删除函数"></a>任务删除函数</h4><p>OSTaskDel</p><h5 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h5><p>OS_TCB</p><p>OS_ERR </p><h3 id="任务的挂起与恢复"><a href="#任务的挂起与恢复" class="headerlink" title="任务的挂起与恢复"></a>任务的挂起与恢复</h3><p>挂起函数OSTaskSuspend(),参数为任务控制块和错误码</p><p>恢复函数OSTaskResume(), 参数与挂起函数一致</p><h3 id="时间片轮转调度-1"><a href="#时间片轮转调度-1" class="headerlink" title="时间片轮转调度"></a>时间片轮转调度</h3><p>适用于同一优先级下的多个任务调度</p><p>函数OSSchedRoundRobinCfg(使能，时间片长度,传入错误码);</p><p>OSScheRoundRobinYield放弃本次时间片函数</p><h4 id="开启时间片轮转调度步骤"><a href="#开启时间片轮转调度步骤" class="headerlink" title="开启时间片轮转调度步骤"></a>开启时间片轮转调度步骤</h4><p>设置宏OS_CFG_SCHED_ROUND_ROBIN_EN为1</p><p>调用函数OSSchedRoundRobinCfg来开启时间片轮转调度功能，并且设置时间片长度</p><p>在创建任务时对OS_TICK进行赋值即可，单位为时间片个数</p><h3 id="系统内部任务"><a href="#系统内部任务" class="headerlink" title="系统内部任务"></a>系统内部任务</h3><h4 id="空闲任务"><a href="#空闲任务" class="headerlink" title="空闲任务"></a>空闲任务</h4><p>空闲任务是ucos创建的第一个任务</p><p>空闲任务时ucos必须创建的</p><h4 id="时钟节拍任务"><a href="#时钟节拍任务" class="headerlink" title="时钟节拍任务"></a>时钟节拍任务</h4><p>时钟节拍任务用来跟踪任务延时和任务等待超时</p><p>任务函数为OS_TickTask，是ucos必须创建的一个任务</p><h4 id="统计任务"><a href="#统计任务" class="headerlink" title="统计任务"></a>统计任务</h4><p>用来统计CPU的使用率</p><p>将OS_CFG_STAT_TASK_EN置一</p><p>调用函数OSStatTaskCPUUsageInit来使用</p><h4 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h4><p>调用OS_TmrInit来创建定时任务</p><h4 id="中断服务管理任务"><a href="#中断服务管理任务" class="headerlink" title="中断服务管理任务"></a>中断服务管理任务</h4><p>OS_CFG_IS_POST_DEFERREND_EN置一使能中断服务函数</p><p>中断服务管理任务优先级永远为0</p><h4 id="钩子函数"><a href="#钩子函数" class="headerlink" title="钩子函数"></a>钩子函数</h4><p>当使能空闲任务的钩子函数之后每次进入空闲任务就会调用指针所指向的钩子函数</p><p>使能钩子函数需要将对应宏定义置一</p><h3 id="UCOS的中断和时间管理"><a href="#UCOS的中断和时间管理" class="headerlink" title="UCOS的中断和时间管理"></a>UCOS的中断和时间管理</h3><h4 id="中断管理"><a href="#中断管理" class="headerlink" title="中断管理"></a>中断管理</h4><p>进入中断函数时先调用OSInTEnter()函数，退出时调用OSIntExit()函数</p><p>OSInTEnter()函数内部使用全局变量OSIntNestingCtr来记录中断嵌套次数，最多支持250级中断嵌套</p><h4 id="任务延时"><a href="#任务延时" class="headerlink" title="任务延时"></a>任务延时</h4><p>除空闲任务外的所有任务必须在合适的位置调用系统提供的<strong>延时函数</strong>，让当前的任务暂停运行一段时间并进行一个任务切换</p><h3 id="软件定时器"><a href="#软件定时器" class="headerlink" title="软件定时器"></a>软件定时器</h3><p>OS_CFG_TMR_EN宏置一</p><p>回调函数再特定的事件或条件发生时由另外的一方调用，用于对该事件或条件进行响应</p><h4 id="单次定时器"><a href="#单次定时器" class="headerlink" title="单次定时器"></a>单次定时器</h4><p>只执行一次，可以调用定时器启动函数再次启动</p><h4 id="周期模式"><a href="#周期模式" class="headerlink" title="周期模式"></a>周期模式</h4><p>定时结束触发定时回调函数</p><h5 id="无初始延迟"><a href="#无初始延迟" class="headerlink" title="无初始延迟"></a>无初始延迟</h5><h5 id="有初始延迟"><a href="#有初始延迟" class="headerlink" title="有初始延迟"></a>有初始延迟</h5><p>第一次定时根据dly来确定第一个周期，之后每个周期被重置为period</p><h4 id="优先级反转"><a href="#优先级反转" class="headerlink" title="优先级反转"></a>优先级反转</h4><p>获取信号量的任务被抢占CPU使用权后，高优先级的任务由于没有信号量，无法执行，只能等待获取信号量的低优先级任务执行完成才能继续运行</p><h4 id="互斥信号量"><a href="#互斥信号量" class="headerlink" title="互斥信号量"></a>互斥信号量</h4><p>可用于解决优先级反转问题，在低优先级任务获得信号量时被抢占CPU使用权后高优先级任务由于没有信号量无法访问共享资源，会将低优先级任务的优先级暂时提高，使其执行完毕并释放信号量，随后执行高优先级任务</p><h4 id="内嵌信号量"><a href="#内嵌信号量" class="headerlink" title="内嵌信号量"></a>内嵌信号量</h4><p>ucos任务自带的信号量</p><h3 id="消息传递"><a href="#消息传递" class="headerlink" title="消息传递"></a>消息传递</h3><p>任务间通信</p><p>在使用全局变量进行任务间通信时必须保证其对全局变量的<strong>独占式访问</strong></p><p>也可以通过消息队列作为中介发布给任务</p><h4 id="消息类型"><a href="#消息类型" class="headerlink" title="消息类型"></a>消息类型</h4><p>指向数据的指针，数据的长度，记录消息发布时刻的时间戳</p><h4 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h4><p>消息队列时ucos中的一个内核对象，为OS_Q</p><p>结构体为OS_MSG_Q</p><p>成员变量InPtr指向要插入的数据的位置</p><p>成员变量OutPtr指向输出数据的位置</p><p>消息队列使用链式存储存储数据</p><h4 id="API函数"><a href="#API函数" class="headerlink" title="API函数"></a>API函数</h4><p>OSQCreate()创建一个消息队列</p><p>OSQPend()等待消息</p><p>OSQPost()向消息队列中发布一条消息</p><h3 id="事件标志组"><a href="#事件标志组" class="headerlink" title="事件标志组"></a>事件标志组</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;RTOS系统&quot;&gt;&lt;a href=&quot;#RTOS系统&quot; class=&quot;headerlink&quot; title=&quot;RTOS系统&quot;&gt;&lt;/a&gt;RTOS系统&lt;/h1&gt;&lt;h2 id=&quot;硬实时&quot;&gt;&lt;a href=&quot;#硬实时&quot; class=&quot;headerlink&quot; title=&quot;硬实时</summary>
      
    
    
    
    <category term="操作系统" scheme="http://example.com/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="嵌入式" scheme="http://example.com/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>2022.10.10</title>
    <link href="http://example.com/2022/10/10/2022-10-10/"/>
    <id>http://example.com/2022/10/10/2022-10-10/</id>
    <published>2022-10-10T10:49:52.000Z</published>
    <updated>2022-10-10T11:16:00.596Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>8号还想着巩固下计算机操作系统的知识，结果上午摆烂，下午来了实验室也不想学习，磨磨唧唧到了晚上，题目也没看，数据库系统的知识也只是开了个头，很多东西都没听进去，毕业设计也没动，摆烂的一天让我感到羞愧但又什么都不想干，一遍羞愧一遍摆烂。苦笑.jpg</p><h1 id="今天的工作"><a href="#今天的工作" class="headerlink" title="今天的工作"></a>今天的工作</h1><p>今天是周一吗，新的一周开始了，继续开始进行毕业设计的开发，从上次的错误开始进行，没有继续烧录MQTT的固件，选择了不烧录固件，使用mqtt驱动程序去进行阿里云服务器的连接，今天使用驱动代码连接上了云服务器上的设备，设备显示在线，但无法发布消息。又掉坑里了，明天解决这个问题。</p><p>今天倒是解决了之前遇到的程序无法跳出B .的问题，解决方法是检查一下被遗漏的中断处理函数，也没有什么困难。</p><p>今天接了一个可以去实习的公司，是一个医疗器械的公司，在大学科技园阳光园区，有点远，明天可能是有技术面试，HR只是口头答应可以去实习，先看看明天的技术面试吧。</p><h1 id="明天的工作"><a href="#明天的工作" class="headerlink" title="明天的工作"></a>明天的工作</h1><p>尝试解决订阅和发布问题，使单片机可以向阿里云发送消息。</p><h1 id="一些牢骚"><a href="#一些牢骚" class="headerlink" title="一些牢骚"></a>一些牢骚</h1><p>有点心累。</p><p><img src="https://hexo-1314225961.cos.ap-nanjing.myqcloud.com/%E6%97%A5%E5%B8%B8%E8%AE%B0%E5%BD%95%E7%94%A8%E5%9B%BE/2022.10.10_content.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h1&gt;&lt;p&gt;8号还想着巩固下计算机操作系统的知识，结果上午摆烂，下午来了实验室也不想学习，磨磨唧唧到了晚上，题目也没看，数据库系统的知识</summary>
      
    
    
    
    <category term="记录" scheme="http://example.com/categories/%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="毕业设计开发" scheme="http://example.com/tags/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>数据库系统</title>
    <link href="http://example.com/2022/10/09/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/"/>
    <id>http://example.com/2022/10/09/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/</id>
    <published>2022-10-09T06:43:15.000Z</published>
    <updated>2022-10-09T07:08:19.729Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据库模式"><a href="#数据库模式" class="headerlink" title="数据库模式"></a>数据库模式</h2><h3 id="三级模式"><a href="#三级模式" class="headerlink" title="三级模式"></a>三级模式</h3><p>内模式：物理数据库</p><p>概念模式：DBA视图-概念级数据库</p><p>外模式：对应数据库视图-用户级数据库</p><h3 id="两级映射"><a href="#两级映射" class="headerlink" title="两级映射"></a>两级映射</h3><p>外模式-概念模式映射</p><p>概念模式-内模式映射</p><h2 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h2><h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><h3 id="概念结构设计"><a href="#概念结构设计" class="headerlink" title="概念结构设计"></a>概念结构设计</h3><h3 id="逻辑结构设计"><a href="#逻辑结构设计" class="headerlink" title="逻辑结构设计"></a>逻辑结构设计</h3><h3 id="物理设计"><a href="#物理设计" class="headerlink" title="物理设计"></a>物理设计</h3><h3 id="E-R模型"><a href="#E-R模型" class="headerlink" title="E-R模型"></a>E-R模型</h3><p><img src="https://hexo-1314225961.cos.ap-nanjing.myqcloud.com/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/E-R%E6%A8%A1%E5%9E%8B.png"></p><h4 id="E-R图集成方法"><a href="#E-R图集成方法" class="headerlink" title="E-R图集成方法"></a>E-R图集成方法</h4><h5 id="一次集成"><a href="#一次集成" class="headerlink" title="一次集成"></a>一次集成</h5><h5 id="逐步集成"><a href="#逐步集成" class="headerlink" title="逐步集成"></a>逐步集成</h5><p>用累加的方式一次集成两个局部E-R</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;数据库模式&quot;&gt;&lt;a href=&quot;#数据库模式&quot; class=&quot;headerlink&quot; title=&quot;数据库模式&quot;&gt;&lt;/a&gt;数据库模式&lt;/h2&gt;&lt;h3 id=&quot;三级模式&quot;&gt;&lt;a href=&quot;#三级模式&quot; class=&quot;headerlink&quot; title=&quot;三级模式&quot;</summary>
      
    
    
    
    <category term="软考" scheme="http://example.com/categories/%E8%BD%AF%E8%80%83/"/>
    
    
    <category term="软件设计师" scheme="http://example.com/tags/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/"/>
    
  </entry>
  
  <entry>
    <title>2022.10.8</title>
    <link href="http://example.com/2022/10/08/2022-10-8/"/>
    <id>http://example.com/2022/10/08/2022-10-8/</id>
    <published>2022-10-08T11:14:32.000Z</published>
    <updated>2022-10-10T11:15:51.784Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>昨天做了一些毕业设计的工作，打算留一些给今天做。</p><h1 id="今日状态"><a href="#今日状态" class="headerlink" title="今日状态"></a>今日状态</h1><p>今天上午天气阴沉，无心学习，想着放个小假，遂开始摆烂，在宿舍躺了半天，看了两场比赛。</p><p>下午做完核酸后来到实验室，不想做毕设，开发真的好麻烦啊，开局刷经验好累啊。于是学习软件设计师考试的内容，过了一遍操作系统的理论知识。</p><h1 id="明天规划"><a href="#明天规划" class="headerlink" title="明天规划"></a>明天规划</h1><p>做做操作系统的题目对今天的知识进行巩固，继续进行毕业设计的制作。</p><p><img src="https://hexo-1314225961.cos.ap-nanjing.myqcloud.com/%E6%97%A5%E5%B8%B8%E8%AE%B0%E5%BD%95%E7%94%A8%E5%9B%BE/2022.10.8_content.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h1&gt;&lt;p&gt;昨天做了一些毕业设计的工作，打算留一些给今天做。&lt;/p&gt;
&lt;h1 id=&quot;今日状态&quot;&gt;&lt;a href=&quot;#今日状态&quot; cla</summary>
      
    
    
    
    <category term="记录" scheme="http://example.com/categories/%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="毕业设计开发" scheme="http://example.com/tags/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>计算机操作系统</title>
    <link href="http://example.com/2022/10/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    <id>http://example.com/2022/10/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</id>
    <published>2022-10-08T08:07:53.000Z</published>
    <updated>2022-10-08T11:03:33.728Z</updated>
    
    <content type="html"><![CDATA[<h2 id="PV操作"><a href="#PV操作" class="headerlink" title="PV操作"></a>PV操作</h2><p>P操作：信号量-1；</p><p>V操作：信号量＋1;</p><p>P操作为在没有信号量之前为阻塞状态，需要V操作进行唤醒。</p><p>一对PV操纵使用同一个信号量<img src="https://hexo-1314225961.cos.ap-nanjing.myqcloud.com/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/PV%E6%93%8D%E4%BD%9C.png"></p><p>图中题目中，收银员进程在购书者产生付款需求之前处于阻塞状态，因此是一个P操作，购书者提出付款需求，需要使用V操作来唤醒收银员进程，这一对PV操作使用一组信号量，购书者需要等待收银员进程执行完成，因此需要使用P操作阻塞购书者进程，等待收银员进程产生V操作来释放信号量来继续运行。这一对PV操作使用另一组信号量。</p><p>1.A</p><p>2.C</p><h2 id="死锁问题"><a href="#死锁问题" class="headerlink" title="死锁问题"></a>死锁问题</h2><h3 id="死锁产生的条件"><a href="#死锁产生的条件" class="headerlink" title="死锁产生的条件"></a>死锁产生的条件</h3><p>环路等待：各个进程各自等待目标进程的资源，形成环路</p><p>互斥：资源是互斥的</p><p>不可剥夺：系统不会剥夺已经分配给进程的资源</p><p>保持和等待：各个进程保持自己的资源并等待其他进程释放资源给自己</p><h3 id="死锁预防"><a href="#死锁预防" class="headerlink" title="死锁预防"></a>死锁预防</h3><p>打破以上四个条件之一</p><h3 id="死锁避免"><a href="#死锁避免" class="headerlink" title="死锁避免"></a>死锁避免</h3><h4 id="有序资源分配"><a href="#有序资源分配" class="headerlink" title="有序资源分配"></a>有序资源分配</h4><h4 id="银行家算法"><a href="#银行家算法" class="headerlink" title="银行家算法"></a>银行家算法</h4><p><img src="https://hexo-1314225961.cos.ap-nanjing.myqcloud.com/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E9%93%B6%E8%A1%8C%E5%AE%B6%E7%AE%97%E6%B3%95.png"></p><p>根据已经分配出的资源数，得到目前还剩下的资源为R1：2，R2：1，R3：0，只能满足P2所需要的资源数，所以将资源分配给P2进程，执行完成P2进程后可用资源为4，2，1，只能满足P4进程所需要的资源数，将资源分配给P4进程让其执行，选B。</p><h2 id="存储管理"><a href="#存储管理" class="headerlink" title="存储管理"></a>存储管理</h2><h3 id="分区存储组织"><a href="#分区存储组织" class="headerlink" title="分区存储组织"></a>分区存储组织</h3><p>首次适应算法</p><p>最佳适应算法</p><p>最差适应算法</p><p>循环首次适应算法</p><h3 id="页式存储组织"><a href="#页式存储组织" class="headerlink" title="页式存储组织"></a>页式存储组织</h3><p>把用户程序分配成等大小的页，使用页表来对应内存中的对应块号。</p><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><p>利用率高，碎片小，分配及管理简单。</p><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><p>增加了系统开销，可能产生抖动现象。</p><h4 id="使用页内逻辑地址转换成实际物理地址"><a href="#使用页内逻辑地址转换成实际物理地址" class="headerlink" title="使用页内逻辑地址转换成实际物理地址"></a>使用页内逻辑地址转换成实际物理地址</h4><p>记录下页内地址，根据页号去页表中查找对应块号计算得到物理地址</p><p><img src="https://hexo-1314225961.cos.ap-nanjing.myqcloud.com/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E9%A1%B5%E8%A1%A8.png"></p><p>4K&#x3D;2^12，得到页内地址为A29，第一位为页号，页号5对应物理块号6，所以物理地址为D，6A29H。</p><p>由于刚刚访问过5号页，依次遍历访问位为0的页面，所以淘汰1号页，选B。</p><h3 id="段式存储组织"><a href="#段式存储组织" class="headerlink" title="段式存储组织"></a>段式存储组织</h3><p>段式存储内存大小不同，多道程序共享内存，各段程序修改互不影响。</p><h3 id="段页式存储组织"><a href="#段页式存储组织" class="headerlink" title="段页式存储组织"></a>段页式存储组织</h3><p>结合以上两种存储方式</p><h3 id="快表"><a href="#快表" class="headerlink" title="快表"></a>快表</h3><p>一块小容量的相联存储器，由告诉缓存器组成，速度快，并且可以从硬件上保证按内容并行查找。</p><h3 id="页面置换算法"><a href="#页面置换算法" class="headerlink" title="页面置换算法"></a>页面置换算法</h3><p>最优算法（OPT）</p><p>随机算法（RAND）</p><p>先进先出算法（FIFO）</p><p>最近最少使用算法（LRU）</p><p><img src="https://hexo-1314225961.cos.ap-nanjing.myqcloud.com/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E9%A1%B5%E9%9D%A2%E7%BD%AE%E6%8D%A2%E7%AE%97%E6%B3%95.png"></p><p><img src="https://hexo-1314225961.cos.ap-nanjing.myqcloud.com/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E9%A1%B5%E9%9D%A2%E7%BD%AE%E6%8D%A2%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0%E9%A2%98.png"></p><p>每块需要两次内存的访问：一次查找，一次读取，6个块一共12次内存访问，选B。</p><p>由于指令和操作数都存放在内存的末尾处，读取时会产生两次缺页中断，但指令一次性读入，不会产生缺页中断，操作数会产生两次缺页中断，一共产生5次缺页中断，选C。</p><h2 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h2><h3 id="索引文件结构"><a href="#索引文件结构" class="headerlink" title="索引文件结构"></a>索引文件结构</h3><p>前10个为直接索引，直接在物理盘块内索引。</p><p>第十个索引节点为一级间接索引。</p><p>第十一个索引节点为二级间接索引。</p><p>第十二个索引节点为三级间接索引。</p><h3 id="文件和树形目录结构"><a href="#文件和树形目录结构" class="headerlink" title="文件和树形目录结构"></a>文件和树形目录结构</h3><h4 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h4><p>从根目录开始的路径</p><h4 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h4><p>从当前路径开始的路径</p><h3 id="空闲存储空间的管理"><a href="#空闲存储空间的管理" class="headerlink" title="空闲存储空间的管理"></a>空闲存储空间的管理</h3><h4 id="空闲区表法"><a href="#空闲区表法" class="headerlink" title="空闲区表法"></a>空闲区表法</h4><h4 id="空闲链表法"><a href="#空闲链表法" class="headerlink" title="空闲链表法"></a>空闲链表法</h4><h4 id="位示图法"><a href="#位示图法" class="headerlink" title="位示图法"></a>位示图法</h4><p>例如选座。</p><p><img src="https://hexo-1314225961.cos.ap-nanjing.myqcloud.com/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E4%BD%8D%E7%A4%BA%E5%9B%BE.png"></p><p>字长为32位，（4195+1）&#x2F;32&#x3D;131.125，超过131，当前物理块在第132个物理字当中。</p><p>第三位置置一</p><h4 id="成组链接法"><a href="#成组链接法" class="headerlink" title="成组链接法"></a>成组链接法</h4><h2 id="设备管理"><a href="#设备管理" class="headerlink" title="设备管理"></a>设备管理</h2><h3 id="数据传输控制方式"><a href="#数据传输控制方式" class="headerlink" title="数据传输控制方式"></a>数据传输控制方式</h3><h4 id="程序控制方式"><a href="#程序控制方式" class="headerlink" title="程序控制方式"></a>程序控制方式</h4><h4 id="程序中断方式"><a href="#程序中断方式" class="headerlink" title="程序中断方式"></a>程序中断方式</h4><h4 id="DMA方式"><a href="#DMA方式" class="headerlink" title="DMA方式"></a>DMA方式</h4><h4 id="通道"><a href="#通道" class="headerlink" title="通道"></a>通道</h4><h4 id="输入输出处理机"><a href="#输入输出处理机" class="headerlink" title="输入输出处理机"></a>输入输出处理机</h4><h3 id="虚设备与SPOOLING技术"><a href="#虚设备与SPOOLING技术" class="headerlink" title="虚设备与SPOOLING技术"></a>虚设备与SPOOLING技术</h3><p>开辟缓冲区，将要输出的数据先进行缓存。</p><h2 id="微内核操作系统"><a href="#微内核操作系统" class="headerlink" title="微内核操作系统"></a>微内核操作系统</h2><h3 id="单体内核"><a href="#单体内核" class="headerlink" title="单体内核"></a>单体内核</h3><h3 id="微内核"><a href="#微内核" class="headerlink" title="微内核"></a>微内核</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;PV操作&quot;&gt;&lt;a href=&quot;#PV操作&quot; class=&quot;headerlink&quot; title=&quot;PV操作&quot;&gt;&lt;/a&gt;PV操作&lt;/h2&gt;&lt;p&gt;P操作：信号量-1；&lt;/p&gt;
&lt;p&gt;V操作：信号量＋1;&lt;/p&gt;
&lt;p&gt;P操作为在没有信号量之前为阻塞状态，需要V操作进行唤</summary>
      
    
    
    
    <category term="软考" scheme="http://example.com/categories/%E8%BD%AF%E8%80%83/"/>
    
    
    <category term="软件设计师" scheme="http://example.com/tags/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/"/>
    
  </entry>
  
  <entry>
    <title>2022.10.7</title>
    <link href="http://example.com/2022/10/07/2022-10-7/"/>
    <id>http://example.com/2022/10/07/2022-10-7/</id>
    <published>2022-10-07T11:18:04.000Z</published>
    <updated>2022-10-10T11:16:10.294Z</updated>
    
    <content type="html"><![CDATA[<h1 id="毕设开题"><a href="#毕设开题" class="headerlink" title="毕设开题"></a>毕设开题</h1><h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>今天是毕业设计开题的日子，题目定为《基于STM32的森林火灾检测系统的设计与实现》，由于毕设和以后就业方向的知识大致吻合，所以已经完成了一部分内容，已经完成了采集温湿度的程序，还打算加上GPS定位功能，采集完成后一同发往上位机。</p><h2 id="正在进行的内容"><a href="#正在进行的内容" class="headerlink" title="正在进行的内容"></a>正在进行的内容</h2><p>目前正在进行的工作是使用esp8266进行连接云服务器，已经完成了TCP连接功能，但卡在了连接云服务器的功能上，今天一天的工作下来了解到了连接云服务器需要基于MQTT传输协议，需要向esp8266中烧录固件并使用AT+MQTT指令进行连接，但连接上无线网之后向8266中发送AT指令后一直回复ERROR，目前考虑的解决方法是可能是烧录的固件不支持MQTT。看了许多教程，但教程没有详细地讲述mqtt的AT指令，自己尝试发送AT指令却一直error，唉，麻了麻了，一天下来没有一点进展。</p><h2 id="明日工作内容"><a href="#明日工作内容" class="headerlink" title="明日工作内容"></a>明日工作内容</h2><p>明天尝试更换下固件，按着收藏的博文进行一遍，就这些。</p><h2 id="一些牢骚"><a href="#一些牢骚" class="headerlink" title="一些牢骚"></a>一些牢骚</h2><p>好多东西我都没办法一遍调通，每次都是系统地对知识点进行学习之后才可以向下进行，让我感觉对自己很失望。</p><p>明天还得开始软件设计师考试的学习，还有不到一个月，有一半的东西还没学习，忙死了，又是就业，又是毕设，还想脱单。</p><p><img src="https://hexo-1314225961.cos.ap-nanjing.myqcloud.com/%E6%96%87%E7%AB%A0%E5%B0%81%E9%9D%A2/2022.10.7.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;毕设开题&quot;&gt;&lt;a href=&quot;#毕设开题&quot; class=&quot;headerlink&quot; title=&quot;毕设开题&quot;&gt;&lt;/a&gt;毕设开题&lt;/h1&gt;&lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="记录" scheme="http://example.com/categories/%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="毕业设计开发" scheme="http://example.com/tags/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>创建阿里云平台</title>
    <link href="http://example.com/2022/10/06/%E5%88%9B%E5%BB%BA%E9%98%BF%E9%87%8C%E4%BA%91%E5%B9%B3%E5%8F%B0/"/>
    <id>http://example.com/2022/10/06/%E5%88%9B%E5%BB%BA%E9%98%BF%E9%87%8C%E4%BA%91%E5%B9%B3%E5%8F%B0/</id>
    <published>2022-10-06T02:37:55.000Z</published>
    <updated>2022-10-06T07:16:59.567Z</updated>
    
    <content type="html"><![CDATA[<h3 id="创建阿里云平台"><a href="#创建阿里云平台" class="headerlink" title="创建阿里云平台"></a><strong>创建阿里云平台</strong></h3><h5 id="网络云平台通信协议"><a href="#网络云平台通信协议" class="headerlink" title="网络云平台通信协议"></a>网络云平台通信协议</h5><p>应用层：HTTP、FTP、MQTT</p><p>传输层：TCP、UDP</p><h4 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h4><p>进入阿里云平台，注册登陆后点击控制台，在上方搜索栏搜索物联网平台后点击进入</p><h5 id="创建产品和设备"><a href="#创建产品和设备" class="headerlink" title="创建产品和设备"></a>创建产品和设备</h5><p>产品：某一类产品</p><p>设备：某一个产品硬件</p><p>首先创建产品，后续在产品中添加设备</p><p>点击实例概览，在公共实例区点击设备数，展开左侧设备管理选项，点击产品选项后点击创建产品</p><h5 id="产品配置"><a href="#产品配置" class="headerlink" title="产品配置"></a>产品配置</h5><p>产品名称自定义，所属品类为自定义品类，节点类型直连设备，连网方式为WIFI，数据格式为ICA，点击确定完成产品创建</p><h5 id="在产品中添加设备"><a href="#在产品中添加设备" class="headerlink" title="在产品中添加设备"></a>在产品中添加设备</h5><p>点击设备选型卡，在设备下方的产品种类中选择刚刚创建的产品，点击添加设备，输入设备名称和备注名称后点击确认</p><h3 id="安装MQTT-fx软件"><a href="#安装MQTT-fx软件" class="headerlink" title="安装MQTT.fx软件"></a>安装MQTT.fx软件</h3><h4 id="具体步骤-1"><a href="#具体步骤-1" class="headerlink" title="具体步骤"></a>具体步骤</h4><p>在首页的支持与服务中选择文档中心并进入，点击左侧物联网选项，后续点击阿里云物联网平台</p><p>进入后展开快速入门，点击其中的MQTT.fx接入物联网平台，在页面中找到下载mqtt.fx软件的链接，点击进入进行下载，需下载1.7.1免费版，官网下载的需要许可证。</p><p>点击菜单栏中的extras选项卡，选择edit开头的选项，选择User Credentials选项，随后在阿里云物联网平台中的设备管理选项卡中的设备选择目标设备点击查看MQTT链接参数，将连接参数依次填写到mqttfx软件中</p><p><img src="https://s1.ax1x.com/2022/10/06/x1K9cF.png"></p><p>填写完成检测无误后点击SSL&#x2F;TLS选项卡，勾选允许SSL&#x2F;TLS，选择TLS v1.2，点击ok</p><p>回到首页后选择刚才创建的设备，点击connect按钮进行连接，连接成功后按钮变成灰色</p><p>刷新阿里云平台，设备列表中状态变成在线表示连接成功</p><h4 id="测试数据收发"><a href="#测试数据收发" class="headerlink" title="测试数据收发"></a>测试数据收发</h4><h5 id="服务器发送，电脑端接收"><a href="#服务器发送，电脑端接收" class="headerlink" title="服务器发送，电脑端接收"></a>服务器发送，电脑端接收</h5><p>点击左侧产品按钮，进入创建好的产品，在产品中点击Topic类列表，选择自定义Topic，复制带有【订阅】权限的地址</p><p>mqttfx软件部分点击Subscribe按钮，在edit栏中粘贴刚刚复制的订阅地址，将&#x2F;hqbae3iSjhM&#x2F;${deviceName}&#x2F;user&#x2F;get中的deviceName更改为目标设备名称，随后点击订阅，出现以下界面</p><p>返回阿里云设备页面，选择设备，点击查看，进入后点击Topic列表，找到已订阅的的地址，点击发布消息</p><p>，在弹出的窗口中输入测试文字后点击确定</p><p><img src="https://s1.ax1x.com/2022/10/06/x1Kp1U.png"></p><p>切换到mqttfx软件即可看到发布内容</p><p><img src="https://s1.ax1x.com/2022/10/06/x1KCX4.png"></p><p>回到阿里云界面，点击左侧监控运维选项卡，点击日志服务，选择设备，即可查看历史消息。</p><h5 id="上行测试（电脑端发送，服务器接收）"><a href="#上行测试（电脑端发送，服务器接收）" class="headerlink" title="上行测试（电脑端发送，服务器接收）"></a>上行测试（电脑端发送，服务器接收）</h5><p>点击产品，Topic类列表，自定义Topic，复制操作权限为【发布】的条目</p><p>切换回mqttfx软件，点击publish选项卡，输入带有发布权限的地址&#x2F;hqbae3iSjhM&#x2F;${deviceName}&#x2F;user&#x2F;update&#x2F;error，替换步骤与上方相同，在下方输入字符，点击publish即可发送</p><p>切换到阿里云平台，在日志服务中选择产品即可看到消息</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;创建阿里云平台&quot;&gt;&lt;a href=&quot;#创建阿里云平台&quot; class=&quot;headerlink&quot; title=&quot;创建阿里云平台&quot;&gt;&lt;/a&gt;&lt;strong&gt;创建阿里云平台&lt;/strong&gt;&lt;/h3&gt;&lt;h5 id=&quot;网络云平台通信协议&quot;&gt;&lt;a href=&quot;#网络云平台通信</summary>
      
    
    
    
    
    <category term="esp8266" scheme="http://example.com/tags/esp8266/"/>
    
  </entry>
  
  <entry>
    <title>STM32连接阿里云</title>
    <link href="http://example.com/2022/10/05/STM32%E8%BF%9E%E6%8E%A5%E9%98%BF%E9%87%8C%E4%BA%91/"/>
    <id>http://example.com/2022/10/05/STM32%E8%BF%9E%E6%8E%A5%E9%98%BF%E9%87%8C%E4%BA%91/</id>
    <published>2022-10-05T03:20:06.000Z</published>
    <updated>2022-10-07T11:34:05.677Z</updated>
    
    <content type="html"><![CDATA[<h2 id="烧录固件"><a href="#烧录固件" class="headerlink" title="烧录固件"></a>烧录固件</h2><p>在安信可官网下载固件号为0781的AT固件</p><p>选择8M的固件，选择串口后点击start开始烧录</p><p><img src="https://s1.ax1x.com/2022/10/07/x3X5tI.png"></p><h2 id="移植并修改实例程序中的参数"><a href="#移植并修改实例程序中的参数" class="headerlink" title="移植并修改实例程序中的参数"></a>移植并修改实例程序中的参数</h2><h3 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h3><p>首先进入阿里云平台，展开设备管理，点击设备并查看目标设备，查看MQTT连接参数</p><p>复制地址mqttHostUrl和端口号port作为备用，复制后点击上方的DeviceSecret查看按钮，复制设备证书的三元组信息</p><p>三元组信息：产品ID，设备名，设备证书</p><p>复制完成后点击产品选项，点击查看，点击Topic类列表，点击自定义Topic，复制订阅和发布地址</p><p>修改程序内无线路由器名称和密码，修改IP地址和端口号，修改实际三元组信息，修改实际的订阅地址。</p><h4 id="我的内容"><a href="#我的内容" class="headerlink" title="我的内容"></a>我的内容</h4><p>ip地址：iot-06z00h6yp22nd5b.mqtt.iothub.aliyuncs.com<br>port：1883<br>产品ID：hqbae3iSjhM<br>产品名称：deviceStm32<br>产品证书：bb54c8a0549bb9a9795b98076c8eb7df<br>订阅：&#x2F;hqbae3iSjhM&#x2F;deviceStm32&#x2F;user&#x2F;get<br>发布：&#x2F;hqbae3iSjhM&#x2F;deviceStm32&#x2F;user&#x2F;update&#x2F;error</p><h2 id="云平台数据收发"><a href="#云平台数据收发" class="headerlink" title="云平台数据收发"></a>云平台数据收发</h2><p>进入设备，点击设备选择Topic列表，点击发布消息</p><p>在监控运维中的日志服务可以查看到收发的消息</p><h2 id="驱动程序结构与原理"><a href="#驱动程序结构与原理" class="headerlink" title="驱动程序结构与原理"></a>驱动程序结构与原理</h2><p>程序首先与云平台建立TCP连接，其余通讯由MQTT协议来实现</p><h4 id="MQTT控制报文的结构"><a href="#MQTT控制报文的结构" class="headerlink" title="MQTT控制报文的结构"></a>MQTT控制报文的结构</h4><h5 id="固定报头"><a href="#固定报头" class="headerlink" title="固定报头"></a>固定报头</h5><p>固定包头由两个字节组成，第一个字节包含MQTT控制报文的类型和用于指定控制报文类型的标志位，第二个字节为剩余长度</p><h5 id="可变报头"><a href="#可变报头" class="headerlink" title="可变报头"></a>可变报头</h5><p>内容为订阅和发布信息</p><h5 id="有效载荷"><a href="#有效载荷" class="headerlink" title="有效载荷"></a>有效载荷</h5><p>实际要发送的内容信息</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;烧录固件&quot;&gt;&lt;a href=&quot;#烧录固件&quot; class=&quot;headerlink&quot; title=&quot;烧录固件&quot;&gt;&lt;/a&gt;烧录固件&lt;/h2&gt;&lt;p&gt;在安信可官网下载固件号为0781的AT固件&lt;/p&gt;
&lt;p&gt;选择8M的固件，选择串口后点击start开始烧录&lt;/p&gt;
&lt;p&gt;&lt;</summary>
      
    
    
    
    
    <category term="stm32" scheme="http://example.com/tags/stm32/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2022/10/04/hello-world/"/>
    <id>http://example.com/2022/10/04/hello-world/</id>
    <published>2022-10-04T07:24:34.878Z</published>
    <updated>2022-10-04T07:24:34.878Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
